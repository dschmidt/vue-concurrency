{"version":3,"file":"vue-concurrency.js","sources":["../../src/utils/general.ts","../../src/TaskInstance.ts","../../src/Task.ts","../../src/utils/ssr-utils.ts","../../src/wrap-utils.ts","../../src/TaskGroup.ts"],"sourcesContent":["import { computed, Ref, watch, reactive } from \"./api\";\nimport useTask, { Task } from \"../Task\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { AbortSignalWithPromise } from \"../types/index\";\n\nexport function waitForValue<T = any>(cb: () => T): Promise<T> {\n  return new Promise((resolve) => {\n    const stop = watch(cb, value => {\n      if (value !== undefined && value !== null) {\n        resolve(value);\n        stop && stop();\n      }\n    }, { immediate: true });\n  });\n}\n\nexport const reachedMaxConcurrency = (task: Task<any, any>): boolean =>\n  task._runningInstances.length >= task._maxConcurrency;\n\nexport const cancelFirstRunning = (task: Task<any, any>): void => {\n  const firstRunningInstance = task._activeInstances[0];\n  if (firstRunningInstance) {\n    firstRunningInstance.cancel();\n  }\n};\n\nexport const dropEnqueued = (task: Task<any, any>): void => {\n  task._enqueuedInstances.forEach((instance) => {\n    instance.isEnqueued = false;\n    instance.isDropped = true;\n  });\n};\n\ntype BooleanKeys<T> = {\n  [k in keyof T]: T[k] extends boolean ? k : never;\n}[keyof T];\n\nexport function filteredInstances(\n  cb: () => Task<any, any>,\n  key: BooleanKeys<TaskInstance<any>>\n) {\n  if (!key) {\n    return computed(() => []);\n  }\n\n  return computedFilterBy(() => cb()._instances, key);\n}\n\nfunction computedFilterBy<T>(cb: () => T[], key: keyof T, value?: any) {\n  return computed(() => {\n    const collection = cb();\n    return collection.filter((item) => {\n      const curr = item[key];\n      if (value) {\n        return curr === value;\n      }\n\n      return curr;\n    });\n  });\n}\n\nexport function computedLength(cb: () => any[]): Readonly<Ref<number>> {\n  return computed(() => {\n    const arr = cb();\n    return arr.length;\n  });\n}\n\nexport function computedLastOf<T>(cb: () => readonly T[]): Ref<T | undefined> {\n  return computed(() => {\n    const collection = cb();\n    return collection[collection.length - 1];\n  });\n}\n\nexport function computedFirstOf<T>(\n  cb: () => readonly T[]\n): Readonly<Ref<T | undefined>> {\n  return computed(() => {\n    const collection = cb();\n    return collection[0];\n  });\n}\n\nexport type Reactive<T> = {\n  [K in keyof T]: T[K] extends Ref<infer U> ? U : T[K];\n};\n\nexport const _reactiveContent = <T>(obj: T) => {\n  return obj as Reactive<T>;\n};\n\nexport function _reactive<T extends object>(obj: T) {\n  return reactive(obj) as T;\n}\n\nexport type DeferredObject<T> = {\n  promise: Promise<T>;\n  resolve: Function;\n  reject: Function;\n};\nexport function defer<T>(): DeferredObject<T> {\n  const deferredObject: Record<string, any> = {};\n  const promise = new Promise((resolve, reject) => {\n    deferredObject.resolve = resolve;\n    deferredObject.reject = reject;\n  });\n  deferredObject.promise = promise as Promise<T>;\n\n  return deferredObject as DeferredObject<T>;\n}\n\nexport function printTask(task: Task<any, any>) {\n  let taskType = \"General\";\n\n  if (task._isDropping) {\n    taskType = \"Drop\";\n  }\n\n  if (task._isEnqueuing) {\n    taskType = \"Enqueue\";\n  }\n\n  if (task._isRestartable) {\n    taskType = \"Restartable\";\n  }\n\n  if (task._isKeepingLatest) {\n    taskType = \"KeepLatest\";\n  }\n\n  let header = `${taskType} Task`;\n\n  if (taskType !== \"General\") {\n    header = `${header} with maxConcurrency ${task._maxConcurrency}`;\n  }\n\n  const instanceRows = task._instances.map((instance) => {\n    let colorEmoji;\n\n    if (instance.isSuccessful) {\n      colorEmoji = \"🍏\";\n    } else if (instance.isRunning || instance.isEnqueued) {\n      colorEmoji = \"🍊\";\n    } else if (instance.isError || instance.isCanceled || instance.isDropped) {\n      colorEmoji = \"🔴\";\n    }\n\n    const { status, value, error } = instance;\n    return { status: `${colorEmoji} ${status}`, value, error };\n  });\n\n  console.log(`🚦 ${header}`);\n  console.table(instanceRows);\n}\n\nexport function timeout(time) {\n  if (process.env.NODE_ENV === \"test\") {\n    return Promise.resolve();\n  }\n\n  return new Promise((resolve) => setTimeout(resolve, time));\n}\n\nexport function getCancelToken<T extends { CancelToken: any }>(\n  axios: T,\n  signal: AbortSignalWithPromise\n) {\n  return new axios.CancelToken((cancel) => {\n    signal.pr.catch((reason) => {\n      if (reason === \"cancel\") {\n        cancel();\n      }\n    });\n  });\n}\n\nexport function useAsyncTask<T, U extends any[]>(\n  fn: (signal: AbortSignalWithPromise, ...params: U) => Promise<T>\n) {\n  return useTask(function* (signal, ...params: U) {\n    return fn(signal, ...params);\n  });\n}\n","import CAF from \"caf\";\nimport { computed, EffectScope } from \"./utils/api\";\nimport { _reactive, _reactiveContent, DeferredObject, defer } from \"./utils/general\";\nimport {\n  AbortSignalWithPromise,\n  TaskCb,\n  onFulfilled,\n  onRejected,\n} from \"./types/index\";\n\nexport type TaskInstanceStatus =\n  | \"running\"\n  | \"enqueued\"\n  | \"canceled\"\n  | \"canceling\"\n  | \"dropped\"\n  | \"error\"\n  | \"success\";\nexport interface TaskInstance<T> extends PromiseLike<any> {\n  id: number;\n\n  // Lifecycle\n  hasStarted: boolean;\n  isRunning: boolean;\n  isActive: boolean;\n  isFinished: boolean;\n  isError: boolean;\n  isSuccessful: boolean;\n\n  isCanceling: boolean;\n  isCanceled: boolean;\n\n  isNotDropped: boolean;\n  status: TaskInstanceStatus;\n\n  _run: () => void;\n  cancel: (options?: { force: boolean }) => void;\n  canceledOn: (signal: AbortSignalWithPromise) => TaskInstance<T>;\n  token?: Record<string, any>;\n\n  // Concurrency\n  isDropped: boolean;\n  isEnqueued: boolean;\n\n  // Data State\n  value: T | null;\n  error: any | null;\n\n  // Promise-like stuff\n  _shouldThrow: boolean;\n  _canAbort: boolean;\n  _deferredObject: DeferredObject<T>;\n  _handled: boolean; // this is needed to set to true so that Vue does not show error about unhandled rejection\n  then: (onfulfilled: onFulfilled<T>, onrejected?: onRejected) => Promise<any>;\n  catch: (onrejected?: onRejected) => any;\n  finally: (onfulfilled: () => any) => any;\n}\n\nexport interface ModifierOptions {\n  drop: boolean;\n  enqueue: boolean;\n}\n\nexport interface TaskInstanceOptions {\n  id: number;\n  scope: EffectScope,\n  modifiers: ModifierOptions;\n  onFinish: (taskInstance: TaskInstance<any>) => any;\n}\n\nexport default function createTaskInstance<T>(\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): TaskInstance<T> {\n  // Initial State\n  const content = _reactiveContent({\n    id: options.id,\n    isDropped: false,\n    isEnqueued: false,\n\n    hasStarted: false,\n    isRunning: false,\n    isFinished: false,\n    isCanceling: false,\n    isCanceled: computed(\n      () => taskInstance.isCanceling && taskInstance.isFinished\n    ),\n    isActive: computed(\n      () => taskInstance.isRunning && !taskInstance.isCanceling\n    ),\n    isSuccessful: false,\n    isNotDropped: computed(() => !taskInstance.isDropped),\n    isError: computed(() => !!taskInstance.error),\n    status: computed(() => {\n      const t = taskInstance;\n      const match = [\n        [t.isRunning, \"running\"],\n        [t.isEnqueued, \"enqueued\"],\n        [t.isCanceled, \"canceled\"],\n        [t.isCanceling, \"canceling\"],\n        [t.isDropped, \"dropped\"],\n        [t.isError, \"error\"],\n        [t.isSuccessful, \"success\"],\n      ].find(([cond]) => cond) as [boolean, TaskInstanceStatus];\n      return match && match[1];\n    }),\n\n    error: null,\n    value: null,\n    cancel({ force } = { force: false }) {\n      if (!force) {\n        taskInstance.isCanceling = true;\n\n        if (taskInstance.isEnqueued) {\n          taskInstance.isFinished = true;\n        }\n\n        taskInstance.isEnqueued = false;\n      }\n\n      if (taskInstance.token && taskInstance._canAbort) {\n        taskInstance.token.abort(\"cancel\");\n        try {\n          taskInstance.token.discard();\n        } catch (e) {\n          // this can cause an error where AbortSignal cannot be changed\n          // perhaps browsers consider it to be immutable\n          // all in all, failed token discard is no big deal, the memory saved is not that big\n          // and we unset the token also, garbage collector should eventually figure it out\n        }\n        taskInstance.token = undefined;\n        taskInstance._canAbort = false;\n      }\n    },\n    canceledOn(signal: AbortSignalWithPromise) {\n      signal.pr.catch((e) => {\n        taskInstance.cancel();\n      });\n\n      return taskInstance;\n    },\n    _run() {\n      runTaskInstance(taskInstance, cb, params, options);\n    },\n\n    // PromiseLike things. These are necessary so that TaskInstance is `then`able and can be `await`ed\n\n    // Workaround for Vue not to scream because of unhandled rejection. Task is always \"handled\" because the error is saved to taskInstance.error.\n    _handled: true,\n    _deferredObject: defer<T>(),\n    _shouldThrow: false, // task throws only if it's used promise-like way (then, catch, await)\n    _canAbort: true,\n    then(onFulfilled, onRejected) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.then(onFulfilled, onRejected);\n    },\n    catch(onRejected, shouldThrow = true) {\n      taskInstance._shouldThrow = shouldThrow;\n      return taskInstance._deferredObject.promise.catch(onRejected);\n    },\n    finally(cb) {\n      taskInstance._shouldThrow = true;\n      return taskInstance._deferredObject.promise.finally(cb);\n    },\n  });\n\n  // Create\n  const taskInstance = _reactive(content) as TaskInstance<T>;\n\n  // Process = drop, enqueue or run right away!\n  const { modifiers } = options;\n  if (modifiers.drop) {\n    taskInstance.isDropped = true;\n  } else if (modifiers.enqueue) {\n    taskInstance.isEnqueued = true;\n  } else {\n    taskInstance._run();\n  }\n\n  return taskInstance;\n}\n\nfunction runTaskInstance<T>(\n  taskInstance: TaskInstance<any>,\n  cb: TaskCb<T, any>,\n  params: any[],\n  options: TaskInstanceOptions\n): void {\n  const token = new (CAF as any).cancelToken();\n  const cancelable = (CAF as any)(cb, token);\n  taskInstance.token = token;\n\n  taskInstance.hasStarted = true;\n  taskInstance.isRunning = true;\n  taskInstance.isEnqueued = false;\n\n  function setFinished() {\n    taskInstance.isRunning = false;\n    taskInstance.isFinished = true;\n  }\n\n  cancelable\n    .call(taskInstance, token, ...params)\n    .then((value) => {\n      taskInstance.value = value;\n      taskInstance.isSuccessful = true;\n\n      setFinished();\n      taskInstance._deferredObject.resolve(value);\n      taskInstance._canAbort = false;\n      options.onFinish(taskInstance);\n    })\n    .catch((e) => {\n      if (e !== \"cancel\") {\n        taskInstance.error = e;\n      }\n\n      setFinished();\n      if (taskInstance._shouldThrow) {\n        taskInstance._deferredObject.reject(e);\n      }\n      options.onFinish(taskInstance);\n    });\n}\n","import { computed, onBeforeUnmount, getCurrentInstance, effectScope, EffectScope } from \"./utils/api\";\nimport createTaskInstance, {\n  TaskInstance,\n  ModifierOptions,\n} from \"./TaskInstance\";\nimport {\n  reachedMaxConcurrency,\n  cancelFirstRunning,\n  filteredInstances,\n  computedLength,\n  computedLastOf,\n  computedFirstOf,\n  _reactive,\n  _reactiveContent,\n  dropEnqueued,\n} from \"./utils/general\";\nimport { Resolved, TaskCb } from \"./types/index\";\n\nexport type Task<T, U extends any[]> = {\n  // Lifecycle state\n  isIdle: boolean;\n  isRunning: boolean;\n  isError: boolean;\n  performCount: number;\n\n  // Shortcuts to useful instances\n  last: TaskInstance<T> | undefined;\n  lastSuccessful: TaskInstance<T> | undefined;\n  firstEnqueued: TaskInstance<T> | undefined;\n\n  // Action Methods\n  cancelAll: (options?: { force: boolean }) => void;\n  perform: (...params: U) => TaskInstance<T>;\n  clear: () => void;\n  destroy: () => void;\n\n  // Modifiers\n  restartable: () => Task<T, U>;\n  drop: () => Task<T, U>;\n  enqueue: () => Task<T, U>;\n  keepLatest: () => Task<T, U>;\n  maxConcurrency: (number) => Task<T, U>;\n  _resetModifierFlags: () => void;\n\n  // Modifier flags\n  _maxConcurrency: number;\n  _isRestartable: boolean;\n  _isEnqueuing: boolean;\n  _isDropping: boolean;\n  _isKeepingLatest: boolean;\n\n  _hasConcurrency: boolean;\n\n  // Instances\n  _instances: TaskInstance<T>[];\n  _successfulInstances: readonly TaskInstance<T>[];\n  _runningInstances: readonly TaskInstance<T>[];\n  _activeInstances: readonly TaskInstance<T>[];\n  _enqueuedInstances: readonly TaskInstance<T>[];\n  _notDroppedInstances: readonly TaskInstance<T>[];\n\n  // Other\n  _scope: EffectScope\n};\n\nexport default function useTask<T, U extends any[]>(\n  cb: TaskCb<T, U>,\n  options = { cancelOnUnmount: true }\n): Task<Resolved<T>, U> {\n  const vm = getCurrentInstance();\n  const scope = effectScope();\n  const content = _reactiveContent({\n    _scope: scope,\n    _isRestartable: false,\n    _isDropping: false,\n    _isEnqueuing: false,\n    _isKeepingLatest: false,\n    _maxConcurrency: 1, // this is used only when concurrency modifier is active (otherwise it has no effect)\n    _hasConcurrency: computed(\n      () =>\n        task._isRestartable ||\n        task._isDropping ||\n        task._isEnqueuing ||\n        task._isKeepingLatest\n    ),\n\n    isIdle: computed(() => !task.isRunning),\n    isRunning: computed(\n      () => !!task._instances.find((instance) => instance.isRunning)\n    ),\n    isError: computed(() => !!(task.last && task.last.isError)),\n\n    _instances: [],\n    // TODO: the filter + lastOf combo is concise and clear, but more efficient would be classic loop and iterating from the end (findLastIf macro)\n    _successfulInstances: filteredInstances(() => task, \"isSuccessful\"),\n    _runningInstances: filteredInstances(() => task, \"isRunning\"),\n    _enqueuedInstances: filteredInstances(() => task, \"isEnqueued\"),\n    _notDroppedInstances: filteredInstances(() => task, \"isNotDropped\"),\n    _activeInstances: filteredInstances(() => task, \"isActive\"),\n    performCount: computedLength(() => task._instances),\n    last: computedLastOf(() => task._notDroppedInstances),\n    lastSuccessful: computedLastOf(() => task._successfulInstances),\n    firstEnqueued: computedFirstOf(() => task._enqueuedInstances),\n\n    cancelAll({ force } = { force: false }) {\n      // Cancel all running and enqueued instances. Finished and dropped instances can't really be canceled.\n      task._instances.forEach(\n        (taskInstance) => {\n          try {\n            if (force || !taskInstance.isDropped && !taskInstance.isFinished) {\n              taskInstance.cancel({ force });\n            }\n          } catch (e) {\n            if (e !== \"cancel\") {\n              throw e;\n            }\n          }\n        }\n      );\n    },\n\n    perform(...params) {\n      const modifiers: ModifierOptions = {\n        enqueue: false,\n        drop: false,\n      };\n\n      if (task._hasConcurrency && reachedMaxConcurrency(task)) {\n        if (task._isDropping) {\n          modifiers.drop = true;\n        }\n\n        if (task._isRestartable) {\n          cancelFirstRunning(task);\n        }\n\n        if (task._isKeepingLatest) {\n          dropEnqueued(task);\n        }\n\n        if (task._isEnqueuing || task._isKeepingLatest) {\n          modifiers.enqueue = true;\n        }\n      }\n\n      const onFinish = () => onTaskInstanceFinish(task);\n      const newInstance = task._scope.run(() => createTaskInstance<T>(cb, params, {\n        modifiers,\n        onFinish,\n        scope: task._scope,\n        id: task._instances.length + 1,\n      }));\n\n      if (!newInstance) {\n        throw new Error('Failed to create new task instance due inactive scope. Perhaps you are trying to run a task bound to destroyed component?');\n      }\n\n      task._instances = [...task._instances, newInstance];\n\n      return newInstance;\n    },\n\n    clear() {\n      this.cancelAll({ force: true });\n      this._instances = [];\n    },\n\n    destroy() {\n      this._scope.stop();\n      this.clear();\n    },\n\n    restartable() {\n      task._resetModifierFlags();\n      task._isRestartable = true;\n      return task;\n    },\n\n    drop() {\n      task._resetModifierFlags();\n      task._isDropping = true;\n      return task;\n    },\n\n    enqueue() {\n      task._resetModifierFlags();\n      task._isEnqueuing = true;\n      return task;\n    },\n\n    keepLatest() {\n      task._resetModifierFlags();\n      task._isKeepingLatest = true;\n      return task;\n    },\n\n    _resetModifierFlags() {\n      task._isKeepingLatest = false;\n      task._isRestartable = false;\n      task._isEnqueuing = false;\n      task._isDropping = false;\n    },\n\n    maxConcurrency(number) {\n      task._maxConcurrency = number;\n      return task;\n    },\n  });\n  const task = _reactive(content) as Task<T, U>;\n\n  if (vm && options.cancelOnUnmount) {\n    onBeforeUnmount(() => {\n      // check if there's instances still, Vue 3 might have done some cleanup already\n      if (task._instances) {\n        // cancelAll with force is more performant is theres less need for checks\n        task.destroy();\n      }\n    });\n  }\n\n  return task as Task<Resolved<T>, U>;\n}\n\nfunction onTaskInstanceFinish(task: Task<any, any>): void {\n  if (task._isEnqueuing || task._isKeepingLatest) {\n    const { firstEnqueued } = task;\n    if (firstEnqueued) {\n      firstEnqueued._run();\n    }\n  }\n}\n","import {\n  onServerPrefetch,\n  getCurrentInstance,\n  computed,\n} from \"./api\";\nimport { TaskInstance } from \"../TaskInstance\";\nimport { Task } from \"../Task\";\n\nconst isServer = () => typeof window === \"undefined\";\n\nexport function reviveTaskInstance(instance: TaskInstance<any>) {\n  if (instance.isError) {\n    instance._deferredObject.promise = Promise.reject(instance.error);\n  } else {\n    instance._deferredObject.promise = Promise.resolve(instance.value);\n  }\n\n  instance.cancel = () => { };\n  instance.canceledOn = () => instance;\n  instance._run = () => { };\n  instance.then = (...params) =>\n    instance._deferredObject.promise.then(...params);\n  instance.catch = (...params) =>\n    instance._deferredObject.promise.catch(...params);\n  instance.finally = (...params) =>\n    instance._deferredObject.promise.finally(...params);\n}\n\nexport function useTaskPrefetch<T>(\n  key: string,\n  task: Task<T, any>\n): TaskInstance<T> {\n  /* Server */\n  if (isServer()) {\n    // perform, add to prefetch, add to ssrContext\n    const taskInstance = task.perform();\n    onServerPrefetch(async () => {\n      try {\n        await taskInstance;\n        saveTaskToNuxtState(key, task);\n      } catch (e) {\n        // no need for extra handling\n      }\n    });\n    return taskInstance;\n  }\n\n  /* Client */\n  const [last] = reviveTaskInstances(key, task).reverse();\n\n  if (last) {\n    return last;\n  } else {\n    return task.perform();\n  }\n}\n\nfunction saveTaskToNuxtState(key: string, task: Task<any, any>) {\n  const { $root } = getCurrentInstance() as any;\n  const nuxtState = $root && $root.context && $root.context.nuxtState;\n  if (!nuxtState) {\n    throw new Error(\"Could not access $root.context.nuxtState\");\n  }\n\n  if (!nuxtState.vueConcurrency) {\n    nuxtState.vueConcurrency = {};\n  }\n\n  nuxtState.vueConcurrency[key] = computed(() => ({\n    instances: task._instances,\n  }));\n}\n\nfunction reviveTaskInstances(key: string, task: Task<any, any>) {\n  const taskCache = getTaskFromContext(key);\n  if (taskCache) {\n    task._instances = taskCache.instances || [];\n    task._instances.forEach(reviveTaskInstance);\n    deleteTaskCache(key);\n  }\n\n  return task._instances;\n}\n\nfunction getNuxtData() {\n  return (window as any).__NUXT__;\n}\n\nfunction getTaskFromContext(key) {\n  if (!getNuxtData()) {\n    throw Error(`Could not access  window.__NUXT__`);\n  }\n\n  return getNuxtData().vueConcurrency[key].value;\n}\n\nfunction deleteTaskCache(key) {\n  const nuxtData = getNuxtData();\n  delete nuxtData.vueConcurrency[key];\n}\n\nexport function useSSRPersistance(key: string, task: Task<any, any>) {\n  if (isServer()) {\n    saveTaskToNuxtState(key, task);\n    return;\n  }\n\n  reviveTaskInstances(key, task);\n}\n","import useTask, { Task } from \"./Task\";\n\nexport function usePipeTask<T, U extends any[]>(\n  firstTask: Task<any, U>,\n  ...restTasks: Task<any, any>[]\n): Task<T, U> {\n  return useTask(function*(signal, ...args: U) {\n    let result = yield firstTask.perform(...args).canceledOn(signal);\n    for (let task of restTasks) {\n      result = yield task.perform(result).canceledOn(signal);\n    }\n\n    return result;\n  });\n}\n\nexport function useParallelTask(...tasks: Task<any, any>[]): Task<any[], any> {\n  return useTask(function*(signal, ...args) {\n    const instances = tasks.map((task) => {\n      return task.perform(...args).canceledOn(signal);\n    });\n\n    const values = yield Promise.all(instances);\n    return values as any[];\n  });\n}\n\nexport function useSequentialTask<U extends any[]>(\n  ...tasks: Task<any, any>[]\n): Task<any, U> {\n  return useTask(function*(signal, ...args: U) {\n    const instances: any[] = [];\n    for (let task of tasks) {\n      instances.push((yield task.perform(...args).canceledOn(signal)) as any);\n    }\n\n    return instances;\n  });\n}\n","import { Task } from \"./Task\";\nimport { reactive, computed } from \"./utils/api\";\n\nexport interface TaskState {\n  isRunning: boolean;\n  isIdle: boolean;\n}\n\nexport type TaskGroup<U extends Record<string, Task<any, any>>> = TaskState & U;\n\nexport default function useTaskGroup<U extends Record<string, Task<any, any>>>(\n  taskMap: U\n): TaskGroup<U> {\n  const taskArray = Object.values(taskMap);\n  const taskGroup = reactive({\n    isRunning: computed(() => !!taskArray.find((task) => task.isRunning)),\n    isIdle: computed(() => !taskGroup.isRunning),\n    isError: computed(() => !!taskArray.find((task) => task.isError)),\n    ...taskMap,\n  });\n\n  return taskGroup;\n}\n"],"names":["reachedMaxConcurrency","task","_runningInstances","length","_maxConcurrency","cancelFirstRunning","firstRunningInstance","_activeInstances","cancel","dropEnqueued","_enqueuedInstances","forEach","instance","isEnqueued","isDropped","filteredInstances","cb","key","value","computed","filter","item","computedFilterBy","_instances","computedLength","computedLastOf","collection","computedFirstOf","_reactive","obj","reactive","createTaskInstance","params","options","deferredObject","promise","taskInstance","id","hasStarted","isRunning","isFinished","isCanceling","isCanceled","isActive","isSuccessful","isNotDropped","isError","error","status","match","find","force","token","_canAbort","abort","discard","e","undefined","canceledOn","signal","pr","_run","CAF","cancelToken","cancelable","setFinished","call","then","_deferredObject","resolve","onFinish","_shouldThrow","reject","runTaskInstance","_handled","Promise","onFulfilled","onRejected","shouldThrow","modifiers","drop","enqueue","useTask","cancelOnUnmount","vm","getCurrentInstance","_scope","effectScope","_isRestartable","_isDropping","_isEnqueuing","_isKeepingLatest","_hasConcurrency","isIdle","last","_successfulInstances","_notDroppedInstances","performCount","lastSuccessful","firstEnqueued","cancelAll","perform","onTaskInstanceFinish","newInstance","run","scope","Error","clear","this","destroy","stop","restartable","_resetModifierFlags","keepLatest","maxConcurrency","number","onBeforeUnmount","isServer","window","reviveTaskInstance","saveTaskToNuxtState","$root","nuxtState","context","vueConcurrency","instances","reviveTaskInstances","taskCache","getNuxtData","getTaskFromContext","deleteTaskCache","__NUXT__","axios","CancelToken","reason","taskType","header","instanceRows","map","colorEmoji","console","log","table","time","process","env","NODE_ENV","setTimeout","fn","all","firstTask","result","push","taskMap","taskArray","Object","values","taskGroup","onServerPrefetch","reverse","watch","immediate"],"mappings":"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"}